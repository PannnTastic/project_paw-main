<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Laporan Keuangan - POS System</title>
  <link rel="stylesheet" href="/css/karyawan.css">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    .navigasi {
      color : #904b03;
      text-decoration: underline;
    }
    .away {
      color: black;
      text-decoration: none;
    }
    .logout {
      background-color: #904b03;
      color: white;
      border: none;
      border-radius: 10px;
    }
    .financial-card {
      border: 1px solid #ddd;
      border-radius: 8px;
      padding: 20px;
      margin: 15px;
      background-color: #fff;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    .income-card {
      border-left: 5px solid #28a745;
    }
    .expense-card {
      border-left: 5px solid #dc3545;
    }
    .profit-card {
      border-left: 5px solid #17a2b8;
    }
    .chart-container {
      position: relative;
      margin: auto;
      height: 300px;
      width: 100%;
    }
    .financial-value {
      font-size: 24px;
      font-weight: bold;
    }
    .date-filter {
      margin-top: 20px;
      margin-bottom: 20px;
    }
  </style>
</head>
<body>
  <header>
    <h1 class="text-dark">Laporan Keuangan</h1>
    <div class="text-dark fw-bold">
      <span class="mx-2">
        <a href="/admin/dashboard" class="away">Home</a>
      </span>
      <span class="mx-2">
        <a href="/admin/riwayat" class="away">Riwayat</a>
      </span>
      <span class="mx-2">
        <a href="/admin/user" class="away">Akun Kasir</a>
      </span>
      <span class="mx-2 navigasi">Laporan Keuangan</span>
    </div>
    <div class="datetime text-dark">
      <span id="time"></span>
      <span id="date"></span>
      <span class="fw-bold mx-2" id-data="<%= user.id %>">Welcome <%= user.name %></span>
      <form action="http://localhost:8080/logout" class="d-inline" method="post">
        <button type="submit" class="logout p-2">Logout</button>
      </form>
    </div>
  </header>

  <div class="container mt-4">
    <div class="row date-filter">
      <div class="col-md-6">
        <div class="input-group">
          <span class="input-group-text">Periode</span>
          <select id="periodeFilter" class="form-select">
            <option value="day">Hari Ini</option>
            <option value="week">Minggu Ini</option>
            <option value="month" selected>Bulan Ini</option>
            <option value="year">Tahun Ini</option>
          </select>
          <button class="btn edit" id="refreshData">Refresh Data</button>
        </div>
      </div>
      <div class="col-md-6">
        <div class="input-group">
          <span class="input-group-text">Custom Range</span>
          <input type="date" id="startDate" class="form-control">
          <input type="date" id="endDate" class="form-control">
          <button class="btn edit" id="filterDate">Filter</button>
        </div>
      </div>
    </div>

    <div class="row mb-4">
      <div class="col-md-4">
        <div class="financial-card income-card">
          <h5>Total Pemasukan</h5>
          <p class="financial-value" id="totalIncome">Rp 0</p>
          <p class="text-muted">Total pendapatan dari penjualan</p>
        </div>
      </div>
      <div class="col-md-4">
        <div class="financial-card expense-card">
          <h5>Total Pengeluaran</h5>
          <p class="financial-value" id="totalExpense">Rp 0</p>
          <p class="text-muted">Total biaya operasional</p>
          <button class="btn btn-sm edit" data-bs-toggle="modal" data-bs-target="#addExpenseModal">
            + Tambah Pengeluaran
          </button>
        </div>
      </div>
      <div class="col-md-4">
        <div class="financial-card profit-card">
          <h5>Laba / Rugi</h5>
          <p class="financial-value" id="profitLoss">Rp 0</p>
          <p class="text-muted">Keuntungan bersih (Pemasukan - Pengeluaran)</p>
        </div>
      </div>
    </div>

    <div class="row">
      <div class="col-md-8">
        <div class="financial-card">
          <h5>Grafik Keuangan</h5>
          <div class="chart-container">
            <canvas id="financeChart"></canvas>
          </div>
        </div>
      </div>
      <div class="col-md-4">
        <div class="financial-card">
          <h5>Rincian Pengeluaran</h5>
          <div class="table-responsive">
            <table class="table table-hover" id="expenseTable">
              <thead>
                <tr>
                  <th>Tanggal</th>
                  <th>Keterangan</th>
                  <th>Jumlah</th>
                </tr>
              </thead>
              <tbody>
                <!-- Data will be populated by JavaScript -->
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Modal for Adding Expense -->
  <div class="modal fade" id="addExpenseModal" tabindex="-1" aria-labelledby="addExpenseModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="addExpenseModalLabel">Tambah Pengeluaran</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form id="expenseForm">
            <div class="mb-3">
              <label for="expenseDate" class="form-label">Tanggal</label>
              <input type="date" class="form-control" id="expenseDate" required>
            </div>
            <div class="mb-3">
              <label for="expenseDescription" class="form-label">Keterangan</label>
              <input type="text" class="form-control" id="expenseDescription" placeholder="Contoh: Beli bahan baku" required>
            </div>
            <div class="mb-3">
              <label for="expenseAmount" class="form-label">Jumlah (Rp)</label>
              <input type="number" class="form-control" id="expenseAmount" min="1" required>
            </div>
            <div class="mb-3">
              <label for="expenseCategory" class="form-label">Kategori</label>
              <select class="form-select" id="expenseCategory" required>
                <option value="">Pilih Kategori</option>
                <option value="bahan_baku">Bahan Baku</option>
                <option value="operasional">Operasional</option>
                <option value="gaji">Gaji</option>
                <option value="marketing">Marketing</option>
                <option value="lainnya">Lainnya</option>
              </select>
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="delete" data-bs-dismiss="modal">Batal</button>
          <button type="button" class="edit" id="saveExpense">Simpan</button>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
  <script>
    function updateDateTime() {
      const now = new Date();
      document.getElementById("time").textContent = now.toLocaleTimeString();
      document.getElementById("date").textContent = now.toLocaleDateString();
    }

    // Set default dates for filtering
    function setDefaultDates() {
      const today = new Date();
      const firstDayOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);
      
      document.getElementById('startDate').valueAsDate = firstDayOfMonth;
      document.getElementById('endDate').valueAsDate = today;
    }

    // Format number as currency
    function formatCurrency(amount) {
      return new Intl.NumberFormat('id-ID', { 
        style: 'currency', 
        currency: 'IDR',
        minimumFractionDigits: 0,
        maximumFractionDigits: 0
      }).format(amount);
    }

    // Load financial data
    function loadFinancialData(startDate = null, endDate = null) {
      // Show loading indicatorata'; // Updated URL
      document.getElementById('totalIncome').textContent = "Loading...";
      document.getElementById('totalExpense').textContent = "Loading...";
      document.getElementById('profitLoss').textContent = "Loading...";
      
      let url = 'http://localhost:8080/admin/financial/data';  // Updated URL
      if (startDate && endDate) {
        url += `?startDate=${startDate}&endDate=${endDate}`;
      }

      fetch(url)
        .then(res => {
          if (!res.ok) {
            throw new Error(`HTTP error! Status: ${res.status}`);
          }
          return res.json();
        })
        .then(data => {
          if (data.response === 200) {
            // Update summary cards
            document.getElementById('totalIncome').textContent = formatCurrency(data.data.income);
            document.getElementById('totalExpense').textContent = formatCurrency(data.data.expense);
            document.getElementById('profitLoss').textContent = formatCurrency(data.data.profit);
            
            // Update profit/loss color based on value
            const profitElement = document.getElementById('profitLoss');
            if (data.data.profit < 0) {
              profitElement.style.color = '#dc3545'; // red for loss
            } else {
              profitElement.style.color = '#28a745'; // green for profit
            }
            
            // Update expense table
            const expenseTableBody = document.getElementById('expenseTable').getElementsByTagName('tbody')[0];
            expenseTableBody.innerHTML = '';
            
            if (data.data.expenses && data.data.expenses.length > 0) {
              data.data.expenses.forEach(expense => {
                const row = expenseTableBody.insertRow();
                const dateCell = row.insertCell(0);
                const descCell = row.insertCell(1);
                const amountCell = row.insertCell(2);
                
                const expenseDate = new Date(expense.tanggal);
                dateCell.textContent = expenseDate.toLocaleDateString('id-ID');
                descCell.textContent = expense.keterangan;
                amountCell.textContent = formatCurrency(expense.jumlah);
              });
            } else {
              const row = expenseTableBody.insertRow();
              const cell = row.insertCell(0);
              cell.colSpan = 3;
              cell.textContent = 'Tidak ada data pengeluaran';
              cell.style.textAlign = 'center';
            }
            
            // Update chart
            updateFinancialChart(data.data.chartData);
          } else {
            console.error('Server response error:', data);
            alert('Gagal memuat data keuangan: ' + (data.message || 'Unknown error'));
            
            // Reset to default values
            document.getElementById('totalIncome').textContent = formatCurrency(0);
            document.getElementById('totalExpense').textContent = formatCurrency(0);
            document.getElementById('profitLoss').textContent = formatCurrency(0);
            
            const expenseTableBody = document.getElementById('expenseTable').getElementsByTagName('tbody')[0];
            expenseTableBody.innerHTML = '<tr><td colspan="3" class="text-center">Data tidak tersedia</td></tr>';
            
            // Create empty chart
            updateFinancialChart({labels: [], income: [], expense: []});
          }
        })
        .catch(err => {
          console.error('Error fetching financial data:', err);
          alert('Terjadi kesalahan saat memuat data: ' + err.message);
          
          // Reset to default values
          document.getElementById('totalIncome').textContent = formatCurrency(0);
          document.getElementById('totalExpense').textContent = formatCurrency(0);
          document.getElementById('profitLoss').textContent = formatCurrency(0);
          
          const expenseTableBody = document.getElementById('expenseTable').getElementsByTagName('tbody')[0];
          expenseTableBody.innerHTML = '<tr><td colspan="3" class="text-center">Error loading data</td></tr>';
          
          // Create empty chart
          updateFinancialChart({labels: [], income: [], expense: []});
        });
    }

    // Create and update financial chart
    function updateFinancialChart(chartData) {
      const ctx = document.getElementById('financeChart').getContext('2d');
      
      // Destroy existing chart if it exists
      if (window.financeChart instanceof Chart) {
        window.financeChart.destroy();
      }
      
      // Create new chart
      window.financeChart = new Chart(ctx, {
        type: 'bar',
        data: {
          labels: chartData.labels,
          datasets: [
            {
              label: 'Pemasukan',
              data: chartData.income,
              backgroundColor: 'rgba(40, 167, 69, 0.5)',
              borderColor: 'rgba(40, 167, 69, 1)',
              borderWidth: 1
            },
            {
              label: 'Pengeluaran',
              data: chartData.expense,
              backgroundColor: 'rgba(220, 53, 69, 0.5)',
              borderColor: 'rgba(220, 53, 69, 1)',
              borderWidth: 1
            }
          ]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          scales: {
            y: {
              beginAtZero: true,
              ticks: {
                callback: function(value) {
                  return formatCurrency(value).replace('Rp', '');
                }
              }
            }
          },
          interaction: {
            intersect: false,
            mode: 'index'
          },
          plugins: {
            tooltip: {
              callbacks: {
                label: function(context) {
                  return context.dataset.label + ': ' + formatCurrency(context.raw);
                }
              }
            }
          }
        }
      });
    }

    // Save expense function
    function saveExpense() {
      const expenseData = {
        tanggal: document.getElementById('expenseDate').value,
        keterangan: document.getElementById('expenseDescription').value,
        jumlah: parseInt(document.getElementById('expenseAmount').value),
        kategori: document.getElementById('expenseCategory').value
      };

      fetch('http://localhost:8080/admin/expense', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(expenseData)
      })
      .then(res => res.json())
      .then(data => {
        if (data.response === 201) {
          alert('Pengeluaran berhasil ditambahkan');
          // Close modal and reload data
          const modal = bootstrap.Modal.getInstance(document.getElementById('addExpenseModal'));
          modal.hide();
          
          // Reset form
          document.getElementById('expenseForm').reset();
          
          // Reload data
          const startDate = document.getElementById('startDate').value;
          const endDate = document.getElementById('endDate').value;
          loadFinancialData(startDate, endDate);
        } else {
          alert('Gagal menambahkan pengeluaran: ' + data.message);
        }
      })
      .catch(err => {
        console.error('Error:', err);
        alert('Terjadi kesalahan saat menyimpan data');
      });
    }

    // Handle period filter changes
    function handlePeriodChange() {
      const period = document.getElementById('periodeFilter').value;
      const today = new Date();
      let startDate = new Date();
      
      switch (period) {
        case 'day':
          // Today
          break;
        case 'week':
          // Start of current week (Sunday as first day)
          startDate = new Date(today);
          startDate.setDate(today.getDate() - today.getDay());
          break;
        case 'month':
          // Start of current month
          startDate = new Date(today.getFullYear(), today.getMonth(), 1);
          break;
        case 'year':
          // Start of current year
          startDate = new Date(today.getFullYear(), 0, 1);
          break;
      }
      
      document.getElementById('startDate').valueAsDate = startDate;
      document.getElementById('endDate').valueAsDate = today;
      
      loadFinancialData(
        document.getElementById('startDate').value,
        document.getElementById('endDate').value
      );
    }

    // Initialize
    document.addEventListener('DOMContentLoaded', function() {
      // Setup date and time update interval
      setInterval(updateDateTime, 1000);
      updateDateTime();
      
      // Set default dates
      setDefaultDates();
      
      // Initial data load
      loadFinancialData(
        document.getElementById('startDate').value,
        document.getElementById('endDate').value
      );
      
      // Event listeners
      document.getElementById('periodeFilter').addEventListener('change', handlePeriodChange);
      
      document.getElementById('filterDate').addEventListener('click', function() {
        loadFinancialData(
          document.getElementById('startDate').value,
          document.getElementById('endDate').value
        );
      });
      
      document.getElementById('refreshData').addEventListener('click', function() {
        handlePeriodChange();
      });
      
      document.getElementById('saveExpense').addEventListener('click', saveExpense);
    });
  </script>
</body>
</html>
